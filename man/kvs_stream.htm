<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>KVX</title>
    <link rel="stylesheet" href="https://synrc.space/synrc.css" />
</head>

<body>

<nav>
    <a href='https://synrc.space/'>SYNRC</a>
    <a href='https://n2o.space'>N2O</a>
    <a href='https://kvx.n2o.space'>KVX</a>
</nav>

<header>
    <a href="../index.html"><img src="https://n2o.space/img/Synrc Neo.svg"></a>
    <h1>STREAM</h1>
</header>

<main>
    <section>

<h3>INTRO</h3>

<p>The <b>kvs_stream</b> is intended to store, retrieve and manage doubly-linked lists
   using simple key-value interface as underlying API.
   The descriptor of the cursor consist mainly of two parts (reader and writer).
   Writer holds the cached value of the top or bottom of the stream.
   Reader holds the cached value of current cursor position.
   Descriptor also tracks moving direction and distances to both ends,
   which are updated during reader cursor repositioning.
   Cursor should be stored in database.
   If there is no cursor for some data then this data is not alive yet.
   The data could be added only to list ends using writer cursor.
   The data in list could be removed only by record id.
   The list could not contain duplicates or even records with the same id.
   When you consume the stream, the data is not deleted.
   </p>

        <p><blockquote><p><ul>
            <li><b><a href="#new">new/0</a></b> &mdash; new list.</li>
            <li><b><a href="#save">save/1</a></b> &mdash; store cursor to db.</li>
            <li><b><a href="#load">load/1</a></b> &mdash; load cursor from db.</li>
            <li><b><a href="#top">top/1</a></b> &mdash; top of the list.</li>
            <li><b><a href="#bot">bot/1</a></b> &mdash; bottom of the list.</li>
            <li><b><a href="#up">up/1</a></b> &mdash; up from bottom (default).</li>
            <li><b><a href="#down">down/1</a></b> &mdash; down from top.</li>
            <li><b><a href="#next">next/1</a></b> &mdash; move reader next.</li>
            <li><b><a href="#prev">prev/1</a></b> &mdash; move reader prev.</li>
            <li><b><a href="#take">take/1</a></b> &mdash; take N elements staring from reader.</li>
            <li><b><a href="#drop">drop/1</a></b> &mdash; skip N elements staring from reader.</li>
            <li><b><a href="#add">add/1</a></b> &mdash; add element to list.</li>
            <li><b><a href="#remove">remove/1</a></b> &mdash; remove element from list.</li>
            <li><b><a href="#cons">cons/1</a></b> &mdash; add element to top.</li>
            <li><b><a href="#snoc">snoc/1</a></b> &mdash; add element to bot.</li>
        </ul></p></blockquote></p>

    <p>
      You can grab <a style="margin-bottom:30px;"
       href="https://raw.githubusercontent.com/synrc/kvs/master/src/kvs_stream.erl">kvs_stream</a>
      and use it in your applications without importing <b>synrc/kvs</b> dependency,
      as this module is self-containing.
      The possible applications are: public and private feeds, FIFO queues,
   unread messages, chat applications, blockchain, etc.<br><br>
        <img src="https://n2o.space/img/Erlang.png" width=50></p>

    </section>
    <section>

<h3>RECORDS</h3>

<figure><figcaption>KVS CORE</figcaption><code>
    #ok { data= [] :: term() }.

 #error { data= [] :: term() }.

   #cur { id=   [] :: term(),
          top=  [] :: [] | integer(),
          bot=  [] :: [] | integer(),
          dir=   0 ::  0 | 1,
          reader= [] :: [] | tuple(),
          writer= [] :: [] | tuple(),
          left=  0 :: integer(),
          right= 0 :: inetegr(),
          args= [] :: term(),
          status=[]:: add | remove | save | load
                    | next | prev | take | drop
                    | top | bot }.

  #iter { id=   [] :: [] | integer(),
          prev= [] :: [] | integer(),
          next= [] :: [] | integer()).

</code></figure>

<p><ul>
<li>id &mdash; Unique key of the cursor.</li>
<li>writer &mdash; Append writes to one of the two ends of the list.</li>
<li>reader &mdash; Reader cursor tracks distances to edges.</li>
<li>dir=0 &mdash; Adding to top, reading up from bottom (default).</li>
<li>dir=1 &mdash; Adding to bottom, reading down from top.</li>
<li>top &mdash; The id of top element of the list.</li>
<li>bot &mdash; The id of bottom element of the list.</li>
<li>args &mdash; integer for take/drop/remove/get, tuple for add/put</li>
<li>status &mdash; operation</li>
<li>left &mdash; The distance to top from reader.</li>
<li>right &mdash; The distance to bottom from reader.</li>
</ul></p>

<p><ul>
<li>id &mdash; Unique key of the record in the list.</li>
<li>next &mdash; The next element of the list.</li>
<li>prev &mdash; The prev element of the list.</li>
</ul></p>

    </section>
    <section>

<h3>EXAMPLE</h3>

<figure><code>
 -module(test).
 -include_lib("kvs/include/kvs.hrl").
 -include_lib("kvs/include/user.hrl").
 -compile(export_all).

 set(X,Y,Z) -> setelement(X,Z,Y).

 check() ->
     Cur = kvs_stream:new(),
     [A,B,C,D] = [ kvs:seq(person,1)
              || _ <- lists:seq(1,4) ],
     R = kvs_stream:save(
         kvs_stream:add(set(#cur.args,#person{id=A},
         kvs_stream:add(set(#cur.args,#person{id=B},
         kvs_stream:add(set(#cur.args,#person{id=C},
         kvs_stream:add(set(#cur.args,#person{id=D}, Cur ))))))))),
     X = kvs_stream:take(
         kvs_stream:down(
         kvs_stream:top(R#cur{args=-1}))),
     Y = kvs_stream:take(
         kvs_stream:up(
         kvs_stream:bot(R#cur{args=-1}))),
     X = lists:reverse(Y),
     L = length(X).

 > test:check().
 4

 > kvs:all(cur).
 [{cur,1,{user2,1,3,[],[],[],[],[],[]},0,1,2}]

 > kvs_stream:take(
   kvs_stream:top((kvs:get(cur,1))#cur{args=-1})).
[{user2,2,[],4,[],[],[],[],[]},
 {user2,4,2,3,[],[],[],[],[]},
 {user2,3,4,1,[],[],[],[],[]},
 {user2,1,3,[],[],[],[],[],[]}]

</code></figure>
    </section>
    <section>

<h3>API</h3>

<p>We prepared for you sequential steps manual.
   Just enter one by one the erlang commands
   in shell in right order and check the results.</p>

<a name=new></a>
<h4>new() -> #cur{}.</h4>

<p>Creates a KVS cursor.</p>

<figure><code>
 > kvs_stream:new().
 {cur,1,[],[],0,[],[],0,0,[],0,[]}
 > kvs:get(id_seq,"cur").
 {ok,{id_seq,"cur",1}}
 > kvs_stream:new().
 {cur,2,[],[],0,[],[],0,0,[],0,[]}
 > kvs:get(id_seq,"cur").
 {ok,{id_seq,"cur",2}}

</code></figure>

<a name=save></a>
<h4>save(#cur{}) -> #cur{}.</h4>

<p>Saves the cursor to database.<?p>

<figure><code>
 > kvs:all(cur).
 []
 > kvs_stream:save(kvs_stream:new()).
 {cur,3,[],[],0,[],[],0,0,[],0,[]}
 > kvs:all(cur).
 [{cur,3,[],[],0,[],[],0,0,[],0,[]}]

</code></figure>

<a name=load></a>
<h4>load(Id) -> #ok{data::#cur{}} | #error{}.</h4>

<p>Gets a cursor from database.</p>

<figure><code>
  > S = 3, kvs_stream:load(S).
  {cur,3,[],[],0,[],[],0,0,[],0,[]}

</code></figure>

<a name=add></a>
<h4>add(#cur{args::tuple()}) -> #cur{}.</h4>

<p>Adds any object to datatabase and update writer cursor.
   Object is linked on next prev fields with existed data under cursor.
   If cursor doesn't contain top or bottom value the additional
   seek to the end is performed according to cursor direction.</p>

<figure><code>
 > rr(kvs_stream).
 [block,container,cur,id_seq,iter,iterator,kvs,log,operation]

 > P = {user2,[],[],[],[],[],[],[],[]},
   kvs_stream:save(kvs_stream:add((kvs_stream:load(S))#cur{args=P})).
 #cur{id = 3,top = 1,bot = 1,dir = 0,
      reader = {user2,1,[],[],[],[],[],[],[]},
      writer = {user2,1,[],[],[],[],[],[],[]},
      left = 0,right = 0,args = [],money = 0,status = []}

</code></figure>

<a name=prev></a>
<h4>prev(#cur{}) -> #cur{} | #error{}.</h4>

<p>Moves cursor to prev. Consume data up from bottom.
   Reutrn error if lists is empty, otherwise next element or last.</p>

<figure><code>
 > kvs_stream:prev(kvs_stream:load(S)).
 {error,not_found}

</code></figure>

<a name=next></a>
<h4>next(#cur{}) -> #cur{} | #error{}.</h4>

<p>Moves cursor to next. Consume data down from top.
   Reutrn error if lists is empty, otherwise next element or last.</p>

<figure><code>
 > kvs_stream:next(kvs_stream:top(
   kvs_stream:save(kvs_stream:add((kvs_stream:load(S))#cur{args=P})))).
  #cur{id = 3,top = 2,bot = 1,dir = 1,
      reader = {user2,1,[],2,[],[],[],[],[]},
      writer = {user2,2,1,[],[],[],[],[],[]},
      left = 0,right = 1,args = [],money = 0,status = []}

</code></figure>

<a name=seek></a>
<h4>seek(#cur{}) -> #cur{} | #error{}.</h4>

<p>Moves cursor to begin or end of the list depending of cursor order.
   If cursor has no cached value then function returns error.</p>

<figure><code>
 > Stream = kvs_stream:save(kvs_stream:add((kvs_stream:load(S))#cur{args=P})),
   kvs_stream:seek(kvs_stream:up(Stream)).
 #cur{id = 3,top = 3,bot = 1,dir = 0,
      reader = {user2,1,[],2,[],[],[],[],[]},
      writer = {user2,3,2,[],[],[],[],[],[]},
      left = 2,right = 0,args = [],money = 0,status = []}

</code></figure>

<a name=top></a>
<h4>top(#cur{}) -> #cur{} | #error{}.</h4>

<p>Moves cursor to top of the list.</p>

<figure><code>
 > kvs_stream:top(kvs_stream:load(S)).
 #cur{id = 3,top = 3,bot = 1,dir = 1,
     reader = {user2,3,2,[],[],[],[],[],[]},
     writer = {user2,3,2,[],[],[],[],[],[]},
     left = 2,right = 0,args = [],money = 0,status = []}

</code></figure>

<a name=bot></a>
<h4>bot(#cur{}) -> #cur{} | #error{}.</h4>

<p>Moves cursor to bottom of the list.</p>

<figure><code>
 > kvs_stream:bot(kvs_stream:load(S)).
 #cur{id = 3,top = 3,bot = 1,dir = 0,
      reader = {user2,1,[],2,[],[],[],[],[]},
      writer = {user2,3,2,[],[],[],[],[],[]},
      left = 2,right = 0,args = [],money = 0,status = []}

</code></figure>

<a name=take></a>
<h4>take(#cur{args=N::integer()}) -> list().</h4>

<p>Trying to consume N records from stream using its current value and direction.
   Returns consumed data. Usually you seek to some position and then consume some data.</p>

<figure><code>
 > kvs_stream:take((kvs_stream:load(S))#cur{args=-1}).
 #cur{id = 3,top = 3,bot = 1,dir = 0,
      reader = {user2,1,[],2,[],[],[],[],[]},
      writer = {user2,3,2,[],[],[],[],[],[]},
      left = 2,right = 0,
      args = [{user2,3,2,[],[],[],[],[],[]},
              {user2,2,1,3,[],[],[],[],[]},
              {user2,1,[],2,[],[],[],[],[]}],
      money = 0,status = []}

</code></figure>

<a name=drop></a>
<h4>drop(#cur{args=N::integer()}) -> #cur{}.</h4>

<p>Drops N elements starting from reader.</p>

<a name=cons></a>
<h4>cons(#cur{args=M::#iter{}}) -> #cur{}.</h4>

<p>Adds element to top.</p>

<a name=snoc></a>
<h4>snoc(#cur{args=M::#iter{}}) -> #cur{}.</h4>

<p>Adds element to bottom.</p>

<a name=down></a>
<h4>down(#cur{}) -> #cur{}.</h4>

<p>Changes the cursor direction.</p>

<a name=up></a>
<h4>up(#cur{}) -> #cur{}.</h4>

<p>Changes the cursor direction (default).</p>

<a name=remove></a>
<h4>remove(Id,#cur{}) -> #cur{} | #error{}.</h4>

<p>Removes record by id from database and unlink it from list.
   If cursor has no cached value then function returns error.
   Please do not use remove, keep your data immutable :-)</p>

<figure><code>
 > kvs_stream:take((kvs_stream:top(kvs_stream:save(
   kvs_stream:remove((kvs_stream:load(S))#cur{args=
   Stream#cur.top-1}))))#cur{args=-1}).
 #cur{id = 3,top = 3,bot = 1,dir = 1,
      reader = {user2,3,1,[],[],[],[],[],[]},
      writer = {user2,1,[],3,[],[],[],[],[]},
      left = 1,right = 0,
      args = [{user2,1,[],3,[],[],[],[],[]},
              {user2,3,1,[],[],[],[],[],[]}],
      money = 0,status = []}

</code></figure>

    </section>
    <section>

<h3>CONFIG</h3>

<p>In sys.config you should specify kvs backend and list of modules
   containing <b>metainfo/0</b> exported function.</p>

<figure><code>
  [{kvs, [{dba, store_mnesia},
          {schema, [kvs]} ]}].

</code></figure>

    </section>
    <section>

<p>This module may refer to:
<a href="http://erlang.org/doc/man/mnesia.html">mnesia</a></b>,
<a href="kvs.htm"><b>kvs</b></a>.
</p>

    </section>
</main>

<footer>
    2005&mdash;2017 &copy; Synrc Research Center
</footer>

</body>
</html>
